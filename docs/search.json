[
  {
    "objectID": "Personnel/Reddit_Sentiment/Reddit_Scrape.html",
    "href": "Personnel/Reddit_Sentiment/Reddit_Scrape.html",
    "title": "Begin sentiment Analysis",
    "section": "",
    "text": "import praw\nimport regex as re\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nimport os\nimport sklearn\nimport nltk\n\nMatplotlib created a temporary cache directory at /tmp/matplotlib-rtvczs6a because the default path (/home/jovyan/.config/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.\nclientid = ''\nclient_secret = ''\nuser_agent = \"\"\nreddit = praw.Reddit(\n    client_id=clientid,\n    client_secret=client_secret,\n    user_agent=user_agent\n)\nprint(reddit.read_only)\n# Output: True\n\nTrue\nimport re\n\ndef find_matched_terms(text, terms):\n    matched = []\n    for term in terms:\n        # Word-boundary search (e.g., matches \"lead\" but not \"leadership\")\n        pattern = rf'\\b{re.escape(term)}\\b'\n        if re.search(pattern, text, flags=re.IGNORECASE):\n            matched.append(term)\n    return matched\ntar_sub = 'datacenter'\nbattery_terms = ['battery', 'batteries', 'lithium', 'li-ion', 'sodium', 'lead', 'acid', 'ups','sodium','ion']\ntime_filter = 'all'\ndata = []\nseen_comments = set()\n\nfor term in battery_terms:\n    for submission in reddit.subreddit(tar_sub).search(term, sort=\"top\", time_filter=time_filter):\n        submission.comments.replace_more(limit=0)\n        for comment in submission.comments.list():\n            if comment.id in seen_comments:\n                continue\n            text = comment.body.lower()\n            matched_terms = find_matched_terms(text, battery_terms)\n            if matched_terms:\n                data.append({\n                    'comment_id': comment.id,\n                    'author': str(comment.author),\n                    'text': text,\n                    'matched_terms': matched_terms,\n                    'submission_id': submission.id,\n                    'submission_title': submission.title\n                })\n                seen_comments.add(comment.id)\n\n# Convert to DataFrame\ndf = pd.DataFrame(data)\ndf.head()\n\n\n\n\n\n\n\n\ncomment_id\nauthor\ntext\nmatched_terms\nsubmission_id\nsubmission_title\n\n\n\n\n0\ng0bu3y5\nghostalker47423\ndo a visual inspection, and if you see any lea...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n\n\n1\ng0diub1\nRedebo\ndisconnect the battery strings via the associa...\n[battery, batteries, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n\n\n2\ng0dtxqg\nletsbebuns\nthe batteries should be removed based on age. ...\n[batteries, lead, acid, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n\n\n3\ng0ebpdx\nlooktowindward\nyes, they are a safety hazard. you should call...\n[battery]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n\n\n4\ng0euygg\nxpkranger\ni’m going to get rid of them, waiting on a quo...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nexample = df['text'][1]\nprint(example)\n\nex_analyzer = SentimentIntensityAnalyzer()\n\nex_sent = ex_analyzer.polarity_scores(example)\nprint(ex_sent)\n\ndisconnect the battery strings via the associated battery breaker or switch that is either in the ups or electrically in line with the ups.  if you want to be safer after that, remove the intercell jumpers between each battery (caution, batteries are always 'live' and can present voltage and current when both terminals are touched).  once the batteries are disconnected and just sitting on a shelf, you can leave them there practically forever with no risk.\n\nalso, would definitely recommend rip and replace on a 15 year old ups.  if you are located in the western us, my company can assist if you're in need.\n{'neg': 0.011, 'neu': 0.889, 'pos': 0.1, 'compound': 0.8366}\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\nanalyzer = SentimentIntensityAnalyzer()\n# Apply VADER to each comment's text\ndf['sentiment'] = df['text'].apply(lambda x: analyzer.polarity_scores(x))\ndf = pd.concat([df.drop('sentiment', axis=1), df['sentiment'].apply(pd.Series)], axis=1)\ndef get_label(score):\n    if score &gt;= 0.05:\n        return 'positive'\n    elif score &lt;= -0.05:\n        return 'negative'\n    else:\n        return 'neutral'\n\ndf['sentiment_label'] = df['compound'].apply(get_label)\ndf.head(3)\n\n\n\n\n\n\n\n\ncomment_id\nauthor\ntext\nmatched_terms\nsubmission_id\nsubmission_title\nneg\nneu\npos\ncompound\nsentiment_label\n\n\n\n\n0\ng0bu3y5\nghostalker47423\ndo a visual inspection, and if you see any lea...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.084\n0.873\n0.043\n-0.4215\nnegative\n\n\n1\ng0diub1\nRedebo\ndisconnect the battery strings via the associa...\n[battery, batteries, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.011\n0.889\n0.100\n0.8366\npositive\n\n\n2\ng0dtxqg\nletsbebuns\nthe batteries should be removed based on age. ...\n[batteries, lead, acid, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.029\n0.971\n0.000\n-0.2617\nnegative\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Simulate a sample of the df for visualization\ndf_viz = pd.DataFrame({\n    'matched_terms': df['matched_terms'],\n    'sentiment_label': df['sentiment_label']\n})\ndf_exploded = df_viz.explode('matched_terms')\n\n\n# Explode matched_terms to allow grouping by single term\ndf_exploded = df_viz.explode('matched_terms')\n\n# Count sentiment labels per battery type\nsentiment_counts = df_exploded.groupby(['matched_terms', 'sentiment_label']).size().unstack(fill_value=0)\n\n# Plot the sentiment distribution per battery type\nsentiment_counts.plot(kind='bar', stacked=True, figsize=(10, 6))\nplt.title('Sentiment Distribution by Battery Type')\nplt.xlabel('Battery Type')\nplt.ylabel('Number of Comments')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.grid(axis='y')\n\nplt.show()\ndf\n\n\n\n\n\n\n\n\ncomment_id\nauthor\ntext\nmatched_terms\nsubmission_id\nsubmission_title\nneg\nneu\npos\ncompound\nsentiment_label\n\n\n\n\n0\ng0bu3y5\nghostalker47423\ndo a visual inspection, and if you see any lea...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.084\n0.873\n0.043\n-0.4215\nnegative\n\n\n1\ng0diub1\nRedebo\ndisconnect the battery strings via the associa...\n[battery, batteries, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.011\n0.889\n0.100\n0.8366\npositive\n\n\n2\ng0dtxqg\nletsbebuns\nthe batteries should be removed based on age. ...\n[batteries, lead, acid, ups]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.029\n0.971\n0.000\n-0.2617\nnegative\n\n\n3\ng0ebpdx\nlooktowindward\nyes, they are a safety hazard. you should call...\n[battery]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.000\n0.718\n0.282\n0.6705\npositive\n\n\n4\ng0euygg\nxpkranger\ni’m going to get rid of them, waiting on a quo...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.000\n0.807\n0.193\n0.7351\npositive\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n263\nfrhl2ew\nswedishhat\nto be fair, full 19in eia racks with ups's are...\n[ups]\nfemyhi\nDoes anyone here use OCP hardware in their dat...\n0.000\n0.944\n0.056\n0.7391\npositive\n\n\n264\nkih1o5a\nNone\n&gt; finally adding your future generator? ah ha ...\n[lead]\n199drs1\nHow can a Field Controls Engineer get PLC Prog...\n0.056\n0.892\n0.052\n-0.1779\nnegative\n\n\n265\ng9583fq\nRedebo\nyou might ask your provider if they have some ...\n[battery]\njcvdpk\nFloor protection in data center\n0.000\n0.940\n0.060\n0.2732\npositive\n\n\n266\nmmhd66m\nAlligatorDan\nthe engineering mindset on youtube is a great ...\n[ups]\n1jw4mql\nAmazon DCEO\n0.013\n0.827\n0.160\n0.9764\npositive\n\n\n267\nmmgzvfn\nLucky_Luciano73\namazon has hired ex-navy guys that we work wit...\n[ups]\n1jw4mql\nAmazon DCEO\n0.092\n0.718\n0.190\n0.6486\npositive\n\n\n\n\n268 rows × 11 columns"
  },
  {
    "objectID": "Personnel/Reddit_Sentiment/Reddit_Scrape.html#model-is-being-trained-on-the-twitter-data",
    "href": "Personnel/Reddit_Sentiment/Reddit_Scrape.html#model-is-being-trained-on-the-twitter-data",
    "title": "Begin sentiment Analysis",
    "section": "model is being trained on the twitter data",
    "text": "model is being trained on the twitter data\n\nMODEL = f'cardiffnlp/twitter-roberta-base-sentiment'\ntokenizer = AutoTokenizer.from_pretrained(MODEL)\nmodel = AutoModelForSequenceClassification.from_pretrained(MODEL)\n\n\nencoded_text = tokenizer(example,return_tensors='pt')\noutput = model(**encoded_text)\nscores = output[0][0].detach().numpy()\nscores = softmax(scores)\n\n\nscores_dict = {\n    'roberta_neg': scores[0],\n    'roberta_neutral': scores[1],\n    'roberta_post': scores[2]\n}\n\n\nprint(scores_dict)\nprint(ex_sent)\n\n{'roberta_neg': 0.07787177, 'roberta_neutral': 0.6052092, 'roberta_post': 0.31691906}\n{'neg': 0.011, 'neu': 0.889, 'pos': 0.1, 'compound': 0.8366}\n\n\n\nfrom scipy.special import softmax\n\ndef polarity_scores_roberta(text):\n    encoded_text = tokenizer(\n        text,\n        return_tensors='pt',\n        truncation=True,       # THIS is what prevents the crash\n        max_length=512,\n        padding=True\n    )\n    output = model(**encoded_text)\n    scores = output[0][0].detach().numpy()\n    scores = softmax(scores)\n    labels = ['negative', 'neutral', 'positive']\n    return labels[scores.argmax()], scores.max()\n\n\ndf[['roberta_label', 'roberta_score']] = df['text'].apply(\n    lambda x: pd.Series(polarity_scores_roberta(x))\n)\n\n\ndf.head(1)\n\n\n\n\n\n\n\n\ncomment_id\nauthor\ntext\nmatched_terms\nsubmission_id\nsubmission_title\nneg\nneu\npos\ncompound\nsentiment_label\nroberta_label\nroberta_score\n\n\n\n\n0\ng0bu3y5\nghostalker47423\ndo a visual inspection, and if you see any lea...\n[batteries]\ni3jdwl\nInheriting a 30 kVA UPS with 2 strings of 24 b...\n0.084\n0.873\n0.043\n-0.4215\nnegative\nnegative\n0.458596\n\n\n\n\n\n\n\n\ndf_exploded = df.explode('matched_terms')\n\n\n# Group by label to visualize distribution\nlabel_counts = df['roberta_label'].value_counts()\n\n# Plot sentiment label distribution\nplt.figure(figsize=(6, 4))\nlabel_counts.plot(kind='bar', color='skyblue')\nplt.title(\"RoBERTa Sentiment Label Distribution\")\nplt.xlabel(\"Sentiment\")\nplt.ylabel(\"Count\")\nplt.xticks(rotation=0)\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n\n# Plot average sentiment score by battery type\navg_score_by_term = df_exploded.groupby('matched_terms')['roberta_score'].mean().sort_values()\n\nplt.figure(figsize=(8, 5))\navg_score_by_term.plot(kind='barh', color='salmon')\nplt.title(\"Average RoBERTa Sentiment Score by Battery Term\")\nplt.xlabel(\"Average Score\")\nplt.ylabel(\"Battery Term\")\nplt.grid(axis='x')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# ---------------------------\n# Visualization by Sentiment Class and Term\n# ---------------------------\nsentiment_counts = df_exploded.groupby(['matched_terms', 'roberta_label']).size().unstack(fill_value=0)\n\nplt.figure(figsize=(10, 6))\nsentiment_counts.plot(kind='bar', stacked=True, colormap='coolwarm', figsize=(10, 6))\nplt.title(\"Sentiment Distribution per Battery Term\")\nplt.xlabel(\"Battery Term\")\nplt.ylabel(\"Number of Comments\")\nplt.xticks(rotation=45)\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n\n# ---------------------------\n# Drill-down: Most Positive & Negative per Term\n# ---------------------------\nmost_pos_comments = df_exploded.sort_values(by='roberta_score', ascending=False).groupby('matched_terms').first().reset_index()\nmost_neg_comments = df_exploded.sort_values(by='roberta_score').groupby('matched_terms').first().reset_index()\n\n# Combine for review\ndrill_df = pd.merge(\n    most_pos_comments[['matched_terms', 'text', 'roberta_score']],\n    most_neg_comments[['matched_terms', 'text', 'roberta_score']],\n    on='matched_terms',\n    suffixes=('_most_positive', '_most_negative')\n)\ndisplay(drill_df)\n\n&lt;Figure size 1000x600 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmatched_terms\ntext_most_positive\nroberta_score_most_positive\ntext_most_negative\nroberta_score_most_negative\n\n\n\n\n0\nacid\nactually, many ups', especially dc grade ups',...\n0.859889\n\"no such thing as a data center that's too col...\n0.455056\n\n\n1\nbatteries\nthat'll prove to be a disaster if the batterie...\n0.945713\nthis may have been the consensus 5 years ago.\\...\n0.436103\n\n\n2\nbattery\nare all of the raid batteries the same age? an...\n0.913489\ni handle all field ups units for a large truck...\n0.446345\n\n\n3\nion\nyes, it is detailed in their site that the mv ...\n0.865184\n\"no such thing as a data center that's too col...\n0.455056\n\n\n4\nlead\nfirst of all, taking on those data center move...\n0.944411\nit really depends op, working at a dc is great...\n0.407846\n\n\n5\nli-ion\nyes, it is detailed in their site that the mv ...\n0.865184\nof course it's feasible. tesla made mega batte...\n0.643169\n\n\n6\nlithium\nactually, many ups', especially dc grade ups',...\n0.859889\nthis may have been the consensus 5 years ago.\\...\n0.436103\n\n\n7\nups\nthe engineering mindset on youtube is a great ...\n0.973194\nyeah i wish we got more remote hands tickets a...\n0.426720\n\n\n\n\n\n\n\n\nneg_comments = df_exploded[df_exploded['roberta_label'] == 'negative']\nneg_lithium = neg_comments[neg_comments['matched_terms'] == 'lithium']\n\n\n\nfrom nltk.tokenize import RegexpTokenizer\n\ntokenizer = RegexpTokenizer(r'\\w+')  # keeps only words, removes punctuation\n\ndef extract_keywords_no_punkt(text_series):\n    all_words = []\n    for text in text_series:\n        tokens = tokenizer.tokenize(text.lower())\n        filtered = [word for word in tokens if word not in stop_words]\n        all_words.extend(filtered)\n    return Counter(all_words).most_common(20)\n\n\n# Define stop_words using NLTK's built-in list\nfrom nltk.corpus import stopwords\n\n\nnltk.download('stopwords')\nstop_words = set(stopwords.words('english'))\n\n# Now that stop_words is defined, rerun the visualization block\nfrom nltk.tokenize import RegexpTokenizer\nfrom collections import Counter\n\ntokenizer = RegexpTokenizer(r'\\w+')\n\ndef extract_keywords_no_punkt(text_series):\n    all_words = []\n    for text in text_series:\n        tokens = tokenizer.tokenize(text.lower())\n        filtered = [word for word in tokens if word not in stop_words]\n        all_words.extend(filtered)\n    return Counter(all_words).most_common(20)\n\nchemistry_pain_points = {}\n\nbattery_terms = neg_comments['matched_terms'].unique()\n\nfor term in battery_terms:\n    chem_comments = neg_comments[neg_comments['matched_terms'] == term]\n    keywords = extract_keywords_no_punkt(chem_comments['text'])\n    chemistry_pain_points[term] = keywords\n\npain_point_data = []\n\nfor term, keywords in chemistry_pain_points.items():\n    for word, freq in keywords:\n        pain_point_data.append({'battery_chemistry': term, 'keyword': word, 'frequency': freq})\n\npain_point_df = pd.DataFrame(pain_point_data)\n\n# Visualize\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntop_pain_points = (\n    pain_point_df\n    .sort_values(by='frequency', ascending=False)\n    .groupby('battery_chemistry')\n    .head(5)\n)\n\nplt.figure(figsize=(12, 6))\nsns.barplot(\n    data=top_pain_points,\n    y='keyword',\n    x='frequency',\n    hue='battery_chemistry',\n    dodge=False\n)\nplt.title('Top Pain Point Keywords by Battery Chemistry')\nplt.xlabel('Frequency')\nplt.ylabel('Keyword')\nplt.legend(title='Battery Chemistry', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.grid(axis='x')\nplt.show()\n\n[nltk_data] Downloading package stopwords to /home/jovyan/nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "My Homework",
    "section": "",
    "text": "Hw 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHW 1\n\n\n\n\nLowell Capobianco\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/hw1/index.html",
    "href": "projects/hw1/index.html",
    "title": "HW 1",
    "section": "",
    "text": "Question 1\nProf says make a chart\n\n#|echo: false\nprint('Hello World')\n\nHello World\n\nimport matplotlib.pyplot as plt\n\nMatplotlib created a temporary cache directory at /tmp/matplotlib-_294fjdn because the default path (/home/jovyan/.config/matplotlib) is not a writable directory; it is highly recommended to set the MPLCONFIGDIR environment variable to a writable directory, in particular to speed up the import of Matplotlib and to better support multiprocessing.\n\nimport numpy as np\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\nplt.plot(x, y)\nplt.title('Sine Wave')\nplt.xlabel('x')\nplt.ylabel('sin(x)')\nplt.grid()\nplt.savefig('sine_wave.png')\nplt.show()\n\n\n\n\n\n\n\n\n\nimport sys\nprint(\"Python version:\", sys.version)\n\nPython version: 3.12.7 | packaged by conda-forge | (main, Oct  4 2024, 15:56:51) [GCC 13.3.0]\n\n\n\n4+ 7\n\n[1] 11"
  },
  {
    "objectID": "Resume.html",
    "href": "Resume.html",
    "title": "Lowell Resume",
    "section": "",
    "text": "Last updated: 2025-04-05\nDownload PDF file."
  },
  {
    "objectID": "personnel.html",
    "href": "personnel.html",
    "title": "Personnel Projects",
    "section": "",
    "text": "This is a test"
  }
]